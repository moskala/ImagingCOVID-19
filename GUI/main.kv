#:import path pathlib
# it means: import pathlib as path

RootWidget:
    id: root_widget
    plot: plot.__self__
    left_panel: left_panel.__self__
    menu_panel: menu_panel.__self__
    slider: slider.__self__
    net_label: net_result.__self__
    slices_info: slices_info.__self__
    BoxLayout:
        orientation: 'horizontal'
        id: whole_panel
        StackLayout:
            width: root_widget.width * 0.2
            id: menu_panel
            orientation: 'tb-lr'
            size_hint_x: None
            Button:
                id: button_load_image
                text: 'Load'
                size_hint_max_y: 50
                on_release: root.show_load()
            Button:
                id: button_anonymize
                text: 'Save anonymized\nimage'
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                size_hint_max_y: 50
                on_release: root.show_save()
            Button:
                id: button_segmentation_A
                text: 'Segmentation\nWatershed'
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                size_hint_max_y: 50
                on_release: root.lung_segment_watershed()
            Button:
                id: button_segmentation_binary
                text: 'Segmentation\nBinary'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.lung_segment_binary()
            Button:
                id: button_layers
                text: 'Automatic\nlayer choice'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.automatic_layer_choice()
            Button:
                id: button_net
                text: 'Neural\nNetwork'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.neural_network()
            Button:
                id: button_net
                text: 'GLCM'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.glcm()
            Button:
                id: button_net
                text: 'Alexnet'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.alexnet()
            Label:
                id: net_result
                text: ''
                size_hint_max_y: 50
            Label:
                id: slices_info
                text: 'Slice: 1/1'
                size_hint_max_y: 50

        BoxLayout:
            orientation: 'vertical'
            id: left_panel
            BoxLayout:
                orientation: 'horizontal'
                size_hint_max_y: 50
                Button:
                    text: "Prev"
                    id: button_prev
                    size_hint_max_x: 40
                    on_release: root.load_next_slice(-1)
                Slider:
                    id: slider
                    step: 1
                    range: (0, 0)
                    on_value: root.slider_changed_value(slider.value)
                Button:
                    text: "Next"
                    id: button_next
                    size_hint_max_x: 40
                    on_release: root.load_next_slice(1)
            MyFigure:
                id: plot


<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserIconView:
            id: filechooser
            path: str(path.Path().resolve().parent.parent / "images_data")

        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)

<SaveDialog>:
    text_input: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserIconView:
            id: filechooser
            on_selection: text_input.text = self.selection and self.selection[0] or ''
            path: str(path.Path().resolve().parent.parent / "images_data")

        TextInput:
            id: text_input
            size_hint_y: None
            height: 30
            multiline: False

        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Save"
                on_release: root.save(filechooser.path, text_input.text)