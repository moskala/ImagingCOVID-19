#:import path pathlib
# it means: import pathlib as path

RootWidget:
    id: root_widget
    plot: plot.__self__
    left_panel: left_panel.__self__
    menu_panel: menu_panel.__self__
    slider: slider.__self__
    net_label: net_result.__self__
    slices_info: slices_info.__self__
    # dd_btn: btn_dropout
    BoxLayout:
        orientation: 'horizontal'
        id: whole_panel
        StackLayout:
            width: root_widget.width * 0.2
            id: menu_panel
            orientation: 'tb-lr'
            size_hint_x: None
            Button:
                id: button_load_image
                text: 'Load'
                size_hint_max_y: 50
                on_release: root.show_load()
            Button:
                id: button_anonymize
                text: 'Save anonymized\nimage'
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                size_hint_max_y: 50
                on_release: root.show_save()
            Button:
                id: button_segmentation_A
                text: 'Segmentation\nWatershed'
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                size_hint_max_y: 50
                on_release: root.lung_segment_watershed()
            Button:
                id: button_segmentation_binary
                text: 'Segmentation\nBinary'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.lung_segment_binary()
            Button:
                id: button_segmentation_KMeansBinary
                text: 'Segmentation\nKMeans'
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                size_hint_max_y: 50
                on_release: root.lung_segment_kmeans()
            Button:
                id: button_layers
                text: 'Automatic\nlayer choice'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.automatic_layer_choice()
            Button:
                id: button_net
                text: 'Neural\nNetwork'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center' 
                valign: 'middle'
                on_release: root.neural_network()
            
            Button:
                text: 'Analysis'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.show_analysis_popup()
            Button:
                id: button_result
                text: 'Reports'
                size_hint_max_y: 50
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                on_release: root.show_result_popup()
            
            Label:
                id: net_result
                text: ''
                size_hint_max_y: 50
            Button:
                text: 'Draw lesions'
                on_release: root.draw_lesions()
            Button:
                text: 'Analize drawn'
                on_release: root.analize_drawn()

        BoxLayout:
            orientation: 'vertical'
            id: left_panel
            BoxLayout:
                orientation: 'horizontal'
                size_hint_max_y: 50
                Button:
                    text: "Prev"
                    id: button_prev
                    size_hint_max_x: 40
                    on_release: root.load_next_slice(-1)
                Slider:
                    id: slider
                    step: 1
                    range: (0, 0)
                    on_value: root.slider_changed_value(slider.value)
                Button:
                    text: "Next"
                    id: button_next
                    size_hint_max_x: 40
                    on_release: root.load_next_slice(1)
            Label:
                id: slices_info
                text: 'Slice: 1/1'
                size_hint_max_y: 50
                size: self.size
            MyFigure:
                id: plot


<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserIconView:
            id: filechooser
            path: str(path.Path().resolve().parent.parent / "images_data")

        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)
<DrawDialog@Popup>:
    id: draw_dialog
    title: 'Draw dialog'
    draw_panel:draw_panel.__self__
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            id: draw_panel
        BoxLayout:
            size_hint_max_y: 50
            Button:
                text: 'Done'
                on_release: draw_dialog.dismiss()
<AnalysisDialog@Popup>:
    id: analysis_dialog
    box_layout: box_layout.__self__
    title: 'Choose a classifier'
    preGlcmHaralick: preGlcmHaralick.__self__
    preAlex: preAlex.__self__
    preSvm: preSvm.__self__
    preLinear: preLinear.__self__
    preRbf: preRbf.__self__
    preSvd: preSvd.__self__
    preLsqr: preLsqr.__self__
    trainGlcmHaralick: trainGlcmHaralick.__self__
    trainAlex: trainAlex.__self__
    trainRandomForest: trainRandomForest.__self__
    trainAuto: trainAuto.__self__
    trainSqrt: trainSqrt.__self__
    trainLog2: trainLog2.__self__
    trainLbfgs: trainLbfgs.__self__
    trainLiblinear: trainLiblinear.__self__
    trainSaga: trainSaga.__self__
    BoxLayout:
        id: box_layout
        orientation:'vertical'
        Label:
            text: 'Recently trained model'
        Label:
            text: 'Choose pretrained classifier'
        BoxLayout:
            orientation: 'horizontal'
            Label: 
                text: 'Features'
            Label:
                text: 'Model'
            Label: 
                text: 'SVM - kernel'
            Label: 
                text: 'Linear discriminant - solver'
        BoxLayout:
            orientation: 'horizontal'
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    id: preGlcmHaralick
                    text: 'GLCM+Haralick'
                    group: 'preFe'
                ToggleButton:
                    id: preAlex
                    text: 'Alexnet'
                    group: 'preFe'
            BoxLayout:
                orientation: 'vertical'
                
                ToggleButton: 
                    id: preSvm
                    text: 'SVM'
                    group: 'preModels'
                ToggleButton:
                    id: preLinearDiscriminant
                    text: 'Linear discriminant'
                    group: 'preModels'
            BoxLayout:
                orientation: 'vertical'
                
                ToggleButton:
                    id: preLinear
                    group: 'preProp'
                    text: 'linear'
                ToggleButton:
                    id: preRbf
                    group: 'preProp'
                    text: 'rbf'

            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    id: preSvd
                    group: 'preProp'
                    text: 'svd'
                ToggleButton:
                    id: preLsqr
                    group: 'preProp'
                    text: 'lsqr'

        Button:
            text: 'Classify'
            on_release: analysis_dialog.analysis_classify_pretrained()
        Label:
            text: 'Train a new classifier'
        BoxLayout:
            orientation: 'horizontal'
            Label: 
                text: 'Features'
            Label:
                text: 'Model'
            Label: 
                text: 'Random forest - max features'
            Label: 
                text: 'Logistic regression - solver'
        BoxLayout:
            orientation: 'horizontal'
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    id: trainGlcmHaralick
                    text: 'GLCM+Haralick'
                    group: 'trainFe'
                ToggleButton:
                    id: trainAlex
                    text: 'Alexnet'
                    group: 'trainFe'
            BoxLayout:
                orientation: 'vertical'
                
                ToggleButton: 
                    id: trainRandomForest
                    text: 'Random forest'
                    group: 'trainModels'
                ToggleButton: 
                    id: trainLogisticRegression
                    text: 'Logistic regression'
                    group: 'trainModels'
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    id: trainAuto
                    group: 'trainProp'
                    text: 'auto'
                ToggleButton:
                    id: trainSqrt
                    group: 'trainProp'
                    text: 'sqrt'
                ToggleButton:
                    id: trainLog2
                    group: 'trainProp'
                    text: 'log2'
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    id: trainLbfgs
                    group: 'trainProp'
                    text: 'lbfgs'
                ToggleButton:
                    id: trainLiblinear
                    group: 'trainProp'
                    text: 'liblinear'
                ToggleButton:
                    id: trainSaga
                    group: 'trainProp'
                    text: 'saga'
        Button:
            text: 'Train and classify'
            on_release: analysis_dialog.analysis_classify_train()
        Button:
            text: 'Close'
            on_release: analysis_dialog.dismiss()

        

<SaveDialog>:
    text_input: text_input
    id: savePopup
    auto_dismiss: True
    BoxLayout:
        
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserIconView:
            id: filechooser
            on_selection: text_input.text = self.selection and self.selection[0] or ''
            path: str(path.Path().resolve().parent.parent / "images_data")

        Label:
            height: 30
            size_hint_y: None
            text: 'Write file name'
        TextInput:
            id: text_input
            size_hint_y: None
            height: 30
            multiline: False

        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: savePopup.cancel()
            Button:
                text: "Save"
                on_release: root.save(filechooser.path, text_input.text)

<ResultPopup@Popup>:
    id: result_popup
    auto_dismiss: False
    title: 'Report popup'
    size_hint: (.8, .8)
    scroll_view: scroll_view.__self__
    BoxLayout:
        orientation: 'vertical'
        padding: [5, 5, 5, 5]
        Label:
            text: 'Current analysis info'
            size_hint_max_y: 30
        ScrollView:
            size_hint_max_y: 200
            do_scroll_x: True
            do_scroll_y: True
            Label:
                size_hint_y: None
                id: scroll_view
                halign: 'justify'
                height: self.texture_size[1]
                text_size: self.width, None
                padding: 10, 10
        Label:
            text: 'Add comments to report'
            size_hint_max_y: 50
            
        TextInput:
            id: comment_input
            size_hint_max_y: 50
        BoxLayout:
            size_hint_max_y: 50
            BoxLayout:
                orientation: 'vertical'
                Button:
                    text: 'Generate report PDF'
                    on_release: result_popup.show_save_pdf(comment_input.text)
                Button:
                    text: 'Generate report CSV'
                    on_release: result_popup.show_save_csv(comment_input.text)
            Button:
                text: 'Close'
                on_release: result_popup.dismiss()

<CustomDropDown>:
    Button:
        text: 'My first Item'
        size_hint_y: None
        height: 44
        on_release: root.select('item1')
    Label:
        text: 'Unselectable item'
        size_hint_y: None
        height: 44
    Button:
        text: 'My second Item'
        size_hint_y: None
        height: 44
        on_release: root.select('item2')